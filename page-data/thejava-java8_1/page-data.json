{"componentChunkName":"component---src-templates-post-tsx","path":"/thejava-java8_1/","result":{"data":{"markdownRemark":{"html":"<p>인터페이스 생성\n다음과 같이 추상 메서드가 딱 하나만 존재하면, 함수형 인터페이스라고 정의</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RunSomething</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">/* public, abstract 키워드는 생략 가능. */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 추상 메서드가 2개 이상일 경우, 함수형 인터페이스가 아니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RunSomething</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">/* public, abstract 키워드는 생략 가능. */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">void</span> <span class=\"token function\">doItAgain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>static, default 메서드를 정의할 수도 있으며 다른 형태의 메서드를 정의하더라도\n<br/>추상 메서드는 하나이기 때문에 함수형 인터페이스라고 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RunSomething</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">/* public, abstract 키워드는 생략 가능. */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TheJava8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 함수형 인터페이스를 명시적으로 정의하고 싶다면\n<br/>자바가 기본적으로 제공하는 어노테이션인 @FunctionalInterface를 사용하여 좀 더 견고하게 사용할 수 있다.\n(추상 메서드가 2개 이상일 경우 오류를 노출함)</p>\n<p><br/>를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RunSomething</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">/* public, abstract 키워드는 생략 가능. */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TheJava8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>RunSomething 인터페이스를 구현해보자.\n<br/>위와 같은 형태를 익명 내부 클래스(anonymous inner class)라고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token comment\">// 익명 내부 클래스 (anonymous inner class)</span>\n        <span class=\"token class-name\">RunSomething</span> runSomething <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RunSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rambda\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// hello</span>\n        <span class=\"token comment\">// Rambda 출력</span>\n        runSomething<span class=\"token punctuation\">.</span><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 익명 내부 클래스를 람다 표현식의 형태로 표현하면 다음과 같다.\n단, 이러한 코드는 내부코드가 한줄일 경우에만 가능하고, 2줄 이상일 경우 중괄호로 묶어줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token comment\">// rambda 표현식으로 변경 가능. 단, doIt안의 코드가 한 줄 일 경우에만</span>\n        <span class=\"token class-name\">RunSomething</span> runSomething <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        runSomething<span class=\"token punctuation\">.</span><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// 2줄 이상일 경우 중괄호로 묶어야 한다.</span>\n        <span class=\"token class-name\">RunSomething</span> runSomething2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        runSomething2<span class=\"token punctuation\">.</span><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 람다 표현식을 사용하면 마치 다른 언어와 같이 함수를 정의한 것으로 보일 수 있지만\n<br/>실제로는 함수형 인터페이스를 인라인으로 구현한 특수한 형태의 오브젝트이다.\n<br/>(함수를 First class object로 사용할 수 있다.)</p>\n<p>또한 함수를 파라미터로 받는다거나, 함수가 함수를 리턴하는 것이 가능하다.</p>\n<p><br/>위에서 선언한 추상 메서드인 doIt의 리턴 값을 int로 변경해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RunSomething</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 아래와 같이 파라미터에 10을 더해서 값을 리턴하는 함수를 정의할 경우,\n<br/>입력한 값에 따라 결과 값을 보장할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// 입력 받은 값이 동일한 경우 결과가 같아야한다.</span>\n        <span class=\"token class-name\">RunSomething</span> runSomething <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> number <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 11 출력</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> runSomething<span class=\"token punctuation\">.</span><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 12 출력</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> runSomething<span class=\"token punctuation\">.</span><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그런데 아래와 같이 리턴 값이 보장해주지 못하는 상황이 발생할 가능성이 있다면 (여지가 있다면)\n<br/>함수형 프로그래밍이(퓨어 함수)라고 판단할 수 없다.\n<br/>\n<br/>\n예) 함수 바깥의 변수를 사용하는 경우 </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \n        <span class=\"token comment\">// 함수의 바깥의 변수</span>\n        <span class=\"token comment\">// int baseNumber = 10;</span>\n        \n        <span class=\"token class-name\">RunSomething</span> runSomething <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RunSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            \n            <span class=\"token comment\">// 함수 바깥의 변수</span>\n            <span class=\"token keyword\">int</span> baseNumber <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> number <span class=\"token operator\">+</span> baseNumber<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        runSomething<span class=\"token punctuation\">.</span><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>예) 외부의 값을 변경하려는 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> baseNumber <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">RunSomething</span> runSomething <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RunSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 컴파일 오류</span>\n                baseNumber<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> number <span class=\"token operator\">+</span> baseNumber<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        runSomething<span class=\"token punctuation\">.</span><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>출처 :\n<br/> 인프런 강의 - 더 자바, Java 8 (백기선)\n<br/><a href=\"https://www.inflearn.com/course/the-java-java8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.inflearn.com/course/the-java-java8</a></p>","excerpt":"인터페이스 생성\n다음과 같이 추상 메서드가 딱 하나만 존재하면, 함수형 인터페이스라고 정의 다음과 같이 추상 메서드가 2개 이상일 경우, 함수형 인터페이스가 아니다. static, default 메서드를 정의할 수도 있으며 다른 형태의 메서드를 정의…","tableOfContents":"","fields":{"slug":"/thejava-java8_1/"},"frontmatter":{"title":"더 자바, Java8 - 함수형 인터페이스와 람다 표현식","date":"Feb 10, 2022","tags":["TheJava-Java8"],"keywords":["더 자바","Java8"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/thejava-java8_1/","series":[{"slug":"/thejava-java8_1/","title":"더 자바, Java8 - 함수형 인터페이스와 람다 표현식","num":1},{"slug":"/thejava-java8_2/","title":"더 자바, Java8 - 자바에서 제공하는 함수형 인터페이스","num":2},{"slug":"/thejava-java8_3/","title":"더 자바, Java8 - 람다 표현식","num":3},{"slug":"/thejava-java8_4/","title":"더 자바, Java8 - 메소드 레퍼런스","num":4},{"slug":"/thejava-java8_5/","title":"더 자바, Java8 - 인터페이스 기본 메소드와 스태틱 메소드","num":5}],"lastmod":"2022-02-10"}},"staticQueryHashes":["2027115977","694178885"]}