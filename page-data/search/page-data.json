{"componentChunkName":"component---src-pages-search-tsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n외부 api를 조회하여 데이터를 끌어오는 스케쥴러가 있었는데, 일부 데이터가 누락되는 이슈가 발생했다.\n\napi를 호출하는 코드는 대충 다음과 같다.\n\n```Java\n.\n.\n.\nResponseEntity<List<CustomDTO>> response = restTemplate.exchange(\n                                            url,\n                                            HttpMethod.GET,\n                                            new HttpEntity<>(\"\", httpHeaders),\n                                            new ParameterizedTypeReference<List<CustomDTO>>() {});\n.\n.\n.\nreturn response.getBody();                             \n```\n특정한 파라미터도 없었고, 브라우저에서 domain url로 붙어도 json data가 보이는 지극히 단순한 코드였는데 \n\nunquoted character ((ctrl-char code 13)) 오류가 간헐적으로 발생하고 있었다.\n   \njson valid 사이트에서 확인해보니, 다음과 같이 속성 값에 줄바꿈 때문에 다음 줄부터 오류가 발생했다.\n\n```text\n{ \"data\" : \"abc\ndef\"\n}\n```\n\n나는 다음과 같이 [ObjectMapper](https://www.baeldung.com/spring-boot-customize-jackson-objectmapper)를 사용해 해결했다.\n\n```Java\n.\n.\nObjectMapper objectMapperForAllowUnquotedControlChars = new ObjectMapper()\n            .configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, true);\n.\n.\n.\n.\nResponseEntity<String> response = restTemplate.exchange(\n                                            url,\n                                            HttpMethod.GET,\n                                            new HttpEntity<>(\"\", httpHeaders),\n                                            String.class);\n\nif( response.getBody() == null ){\n    Collections.EMPTY_LIST();\n}\n\nreturn objectMapperForAllowUnquotedControlChars.readValue(response.getBody()\n                                            , new TypeReference<List<CustomDTO>>(){});\n```\n","excerpt":"외부 api를 조회하여 데이터를 끌어오는 스케쥴러가 있었는데, 일부 데이터가 누락되는 이슈가 발생했다. api를 호출하는 코드는 대충 다음과 같다. 특정한 파라미터도 없었고, 브라우저에서 domain url로 붙어도 json data가 보이는 지극히…","fields":{"slug":"/unquoted-character/"},"frontmatter":{"date":"May 20, 2022","title":"unquoted character ((ctrl-char code 13))","tags":["spring"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n어제 분명히 커밋 & 푸시를 했는데.. 오늘 보니까 잔디에 적용이 안 돼 있다. ~~(개빡치네)~~\n\n파일을 지우고 다시 커밋했는데도 적용이 안됨\n\n(참고 : fork한 repository는 안되는게 맞다)   \n.   \n.   \n\n찾아보니 유저이름과 이메일 설정이 뭔가 꼬인 것 같다.\n\n### 계정 초기화\n```bash\ngit config --global --unset user.name\ngit config --global --unset user.email\n```\n\n### 계정 재설정\n```bash\ngit config user.name \"userName\"\ngit config user.email email@domain.com\n```\n\n\n출처 : https://rizni.tistory.com/207\n","excerpt":"어제 분명히 커밋 & 푸시를 했는데.. 오늘 보니까 잔디에 적용이 안 돼 있다. (개빡치네) 파일을 지우고 다시 커밋했는데도 적용이 안됨 (참고 : fork한 repository는 안되는게 맞다) . .    찾아보니 유저이름과 이메일 설정이 뭔가 …","fields":{"slug":"/github-jandi/"},"frontmatter":{"date":"Feb 12, 2022","title":"Github 잔디가 적용되지 않을 때","tags":["github"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n아래 코드를 개발자 도구에서 실행하거나, 즐겨찾기 url에 붙여넣기한 후 실행한다. \n\n```javascript\nfunction naver(q){\n    void(z=q.body.appendChild(q.createElement('script')));\n    void(z.language='javascript');\n    void(z.type='text/javascript');\n    void(z.src='http://userscripts.org/scripts/source/61326.user.js');\n}\n\nfunction selfw(w) {\n    try {\n        naver(w.document);\n    } catch(e){}\n\n    for (var i = 0; i < w.frames.length; i++) {\n        try {\n            selfw(w.frames[i]);\n        } catch(e){}\n    }\n}\nselfw(self);\n\n(function() {\n    var e, i, all;\n\n    document.onselectstart = null;\n    document.oncontextmenu = null;\n\n    all = document.getElementsByTagName(\"*\");\n\n    for(i = 0; i < all.length; i += 1) {\n        e = all[i];\n        e.onselectstart = null;\n        e.oncontextmenu = null;\n    }\n})();\n```","excerpt":"아래 코드를 개발자 도구에서 실행하거나, 즐겨찾기 url에 붙여넣기한 후 실행한다.","fields":{"slug":"/disable-anti-drag/"},"frontmatter":{"date":"Feb 01, 2022","title":"드래그 방지 해제","tags":["undefined"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n원래 나는 맥북에어를 약 1년간 사용해왔는데, 인텔리제이를 돌렸더니 멈췄다. (젠장 -_-)\n\n그래서 몇달을 고민하다 맥북프로로 넘어왔는데, node를 설치한 후에 블로그 포스팅을 하려고 npm install 명령어를 때렸더니 오류가 났다.\n\n찾아봤더니 설치된 버전이 16이어서, 버전이 안맞아서 그렇단다.\n\n그래서 기존에 설치했던 Node를 다 지우고, brew install node@14로 설치를 하려고 했으나 또 오류가 났다. \n\n#### nvm 다시 설치\n```bash\nbrew install nvm\n```\n\n설치가 되었다면 아래 그림처럼 결과가 나오는데, 자세히 보면 NVM이 동작하지 않을 경우에 대한 설명이 나온다.\n![](screenshot1.png)\n\n#### nvm 폴더 생성\n```bash\nmkdir ~/.nvm\n```\n\n#### .zshrc 수정\n```bash\nvi ~/.zshrc\n```\n\n#### INSERT 모드로 아까 터미널에 있던 아래 내용을 최하단에 붙여넣고 저장한다.\n```bash\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"/opt/homebrew/opt/nvm/nvm.sh\" ] && \\. \"/opt/homebrew/opt/nvm/nvm.sh\"  # This loads nvm\n[ -s \"/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm\" ] && \\. \"/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm\"  # This loads nvm bash_completion\n```\n\n#### 낮은 버전의 Node 설치 (여기선 14)\n```bash\nnvm install 14.17.0\n```\n\n설치가 되고, 아래와 같이 버전이 정상적으로 나오면 끝이다.\n```bash\nnode -v\nv14.17.0\n```\n\n출처 :\nhttps://caileb.tistory.com/206\n","excerpt":"원래 나는 맥북에어를 약 1년간 사용해왔는데, 인텔리제이를 돌렸더니 멈췄다. (젠장 -_-) 그래서 몇달을 고민하다 맥북프로로 넘어왔는데, node를 설치한 후에 블로그 포스팅을 하려고 npm install 명령어를 때렸더니 오류가 났다. 찾아봤더니…","fields":{"slug":"/install-node-m1/"},"frontmatter":{"date":"Jan 29, 2022","title":"MacBook Pro M1 노드 14 이하 버전 설치하기","tags":["settings"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n![](screenshot.png)\n\n나는 본래 개발을 시작한 뒤로 쭈우우욱 윈도우를(..) 사용했다.\n\n그러다 이번에 들어온 회사에서 맥을 사용하게 됐고<br/>\n기본 터미널이 마음에 들지 않아 대체할 터미널을 찾던 중에 hyper를 알게 됐다.\n\n설치 방법은 [백준호님의 블로그](https://junhobaik.github.io/mac-terminal-setting/)에서 확인할 수 있으며,<br/>\n이 글에선 설정 내용이 띄엄띄엄 나오므로, 참조를 위해 나의 설정 내용을 추가한다.\n\n```javascript\n\"use strict\";\n// Future versions of Hyper may add additional config options,\n// which will not automatically be merged into this file.\n// See https://hyper.is#cfg for all currently supported options.\nmodule.exports = {\n    config: {\n        // choose either `'stable'` for receiving highly polished,\n        // or `'canary'` for less polished but more frequent updates\n        updateChannel: 'stable',\n        // default font size in pixels for all tabs\n        fontSize: 12,\n        // font family with optional fallbacks\n        fontFamily: 'Hack, Droid Sans Mono for Powerline, Menlo, \"DejaVu Sans Mono\", Consolas, \"Lucida Console\", monospace',\n        // default font weight: 'normal' or 'bold'\n        fontWeight: 'normal',\n        // font weight for bold characters: 'normal' or 'bold'\n        fontWeightBold: 'bold',\n        // line height as a relative unit\n        lineHeight: 1,\n        // letter spacing as a relative unit\n        letterSpacing: 0,\n        // terminal cursor background color and opacity (hex, rgb, hsl, hsv, hwb or cmyk)\n        cursorColor: 'rgba(248,28,229,0.8)',\n        // terminal text color under BLOCK cursor\n        cursorAccentColor: '#000',\n        // `'BEAM'` for |, `'UNDERLINE'` for _, `'BLOCK'` for █\n        cursorShape: 'BLOCK',\n        // set to `true` (without backticks and without quotes) for blinking cursor\n        cursorBlink: false,\n        // color of the text\n        foregroundColor: '#fff',\n        // terminal background color\n        // opacity is only supported on macOS\n        backgroundColor: '#000',\n        // terminal selection color\n        selectionColor: 'rgba(248,28,229,0.3)',\n        // border color (window, tabs)\n        borderColor: '#333',\n        // custom CSS to embed in the main window\n        css: '',\n        // custom CSS to embed in the terminal window\n        termCSS: '',\n        // set custom startup directory (must be an absolute path)\n        workingDirectory: '',\n        // if you're using a Linux setup which show native menus, set to false\n        // default: `true` on Linux, `true` on Windows, ignored on macOS\n        showHamburgerMenu: '',\n        // set to `false` (without backticks and without quotes) if you want to hide the minimize, maximize and close buttons\n        // additionally, set to `'left'` if you want them on the left, like in Ubuntu\n        // default: `true` (without backticks and without quotes) on Windows and Linux, ignored on macOS\n        showWindowControls: '',\n        // custom padding (CSS format, i.e.: `top right bottom left`)\n        padding: '12px 14px',\n        // the full list. if you're going to provide the full color palette,\n        // including the 6 x 6 color cubes and the grayscale map, just provide\n        // an array here instead of a color map object\n        colors: {\n            black: '#000000',\n            red: '#C51E14',\n            green: '#1DC121',\n            yellow: '#C7C329',\n            blue: '#0A2FC4',\n            magenta: '#C839C5',\n            cyan: '#20C5C6',\n            white: '#C7C7C7',\n            lightBlack: '#686868',\n            lightRed: '#FD6F6B',\n            lightGreen: '#67F86F',\n            lightYellow: '#FFFA72',\n            lightBlue: '#6A76FB',\n            lightMagenta: '#FD7CFC',\n            lightCyan: '#68FDFE',\n            lightWhite: '#FFFFFF',\n            limeGreen: '#32CD32',\n            lightCoral: '#F08080',\n        },\n        // the shell to run when spawning a new session (i.e. /usr/local/bin/fish)\n        // if left empty, your system's login shell will be used by default\n        //\n        // Windows\n        // - Make sure to use a full path if the binary name doesn't work\n        // - Remove `--login` in shellArgs\n        //\n        // Windows Subsystem for Linux (WSL) - previously Bash on Windows\n        // - Example: `C:\\\\Windows\\\\System32\\\\wsl.exe`\n        //\n        // Git-bash on Windows\n        // - Example: `C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe`\n        //\n        // PowerShell on Windows\n        // - Example: `C:\\\\WINDOWS\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe`\n        //\n        // Cygwin\n        // - Example: `C:\\\\cygwin64\\\\bin\\\\bash.exe`\n        shell: '',\n        // for setting shell arguments (i.e. for using interactive shellArgs: `['-i']`)\n        // by default `['--login']` will be used\n        shellArgs: ['--login'],\n        // for environment variables\n        env: {},\n        // Supported Options:\n        //  1. 'SOUND' -> Enables the bell as a sound\n        //  2. false: turns off the bell\n        bell: 'SOUND',\n        // An absolute file path to a sound file on the machine.\n                // bellSoundURL: '/path/to/sound/file',\n        // if `true` (without backticks and without quotes), selected text will automatically be copied to the clipboard\n        copyOnSelect: false,\n        // if `true` (without backticks and without quotes), hyper will be set as the default protocol client for SSH\n        defaultSSHApp: true,\n        // if `true` (without backticks and without quotes), on right click selected text will be copied or pasted if no\n        // selection is present (`true` by default on Windows and disables the context menu feature)\n        quickEdit: false,\n        // choose either `'vertical'`, if you want the column mode when Option key is hold during selection (Default)\n        // or `'force'`, if you want to force selection regardless of whether the terminal is in mouse events mode\n        // (inside tmux or vim with mouse mode enabled for example).\n        macOptionSelectionMode: 'vertical',\n        // Whether to use the WebGL renderer. Set it to false to use canvas-based\n        // rendering (slower, but supports transparent backgrounds)\n        webGLRenderer: true,\n        // keypress required for weblink activation: [ctrl|alt|meta|shift]\n        // todo: does not pick up config changes automatically, need to restart terminal :/\n        webLinksActivationKey: '',\n        // if `false` (without backticks and without quotes), Hyper will use ligatures provided by some fonts\n        disableLigatures: true,\n        // set to true to disable auto updates\n        disableAutoUpdates: false,\n        // set to true to enable screen reading apps (like NVDA) to read the contents of the terminal\n        screenReaderMode: false,\n        // set to true to preserve working directory when creating splits or tabs\n        preserveCWD: true,\n        // for advanced config flags please refer to https://hyper.is/#cfg\n\n        opacity : 0.999\n    },\n    // a list of plugins to fetch and install from npm\n    // format: [@org/]project[#version]\n    // examples:\n    //   `hyperpower`\n    //   `@company/project`\n    //   `project#1.0.1`\n    plugins: [\n        'hypercwd',\n        //'hyper-statusline',\n        'hyper-quit',\n        'hyper-opacity',\n        'hyper-tab-icons',\n        'hyper-materialshell',\n        'hyperborder'\n    ],\n\n    hyperBorder : {\n        borderColors : ['#e154c3', '#e154c3'],\n        borderWidth : '3px'\n    },\n\n    // in development, you can create a directory under\n    // `~/.hyper_plugins/local/` and include it here\n    // to load it and avoid it being `npm install`ed\n    localPlugins: [],\n    keymaps: {\n    // Example\n    // 'window:devtools': 'cmd+alt+o',\n    },\n};\n```\n","excerpt":"나는 본래 개발을 시작한 뒤로 쭈우우욱 윈도우를(..) 사용했다. 그러다 이번에 들어온 회사에서 맥을 사용하게 됐고\n기본 터미널이 마음에 들지 않아 대체할 터미널을 찾던 중에 hyper를 알게 됐다. 설치 방법은 백준호님의 블로그에서 확인할 수 있으…","fields":{"slug":"/hyper-terminal/"},"frontmatter":{"date":"Jan 07, 2022","title":"Hyper Terminal","tags":["hyper"],"update":"Jan 01, 0001"}}},{"node":{"rawMarkdownBody":"\n![](screenshot1.png)\n\n본 블로그를 이루고 있는 테마에 대해 소개하고자 한다.\n\n지금까지 나는 tistory, velog 등 쉽고 빠르게 접근할 수 있는 블로그 서비스들을 개인 저장소겸 블로그로 이용해왔다.\n\n그러던 중에 맥을 사용하게 돼서 하이퍼 터미널 검색 도중 백준호님의 블로그를 구경하게 됐다.\n\n블로그가 하나부터 열까지 마음에 쏙 들어서 링크를 타고 깃허브에 갔더니 테마를 쉽게 사용할 수 있도록 [문서화](https://github.com/junhobaik/junhobaik.github.io/wiki/Document-(Borderless))까지 해놓으신걸 보고, 블로그를 만들게 되었다.\n\n테마를 적용하고 싶다면 상기 링크의 문서를 참고하여 백준호님의 [github repository](https://github.com/junhobaik/junhobaik.github.io)에서 Fork/Clone 해서 적용할 수 있다.\n\n이 테마를 공유해주신 백준호님에게 감사의 말씀 드리고 싶다.\n\n<br/>\n<br/>\n\n적용하면서 documents에서 찾을 수 없었던 내용이 있는데\n\n나는 repository의 이름, _config.js를 설정하고 deploy했더니 아래와 같이 블로그가 안나오고 README가 나왔다 -.-\n\n![](screenshot2.png)\n\n혹시나 나와 같이 블로그가 안나오고 README가 나온다면 아래 설정을 확인해 봐야 한다.\n\n#### repository > settings > Pages 이동 : branch > develop를 master로 변경\n![](screenshot3.png)\n","excerpt":"본 블로그를 이루고 있는 테마에 대해 소개하고자 한다. 지금까지 나는 tistory, velog 등 쉽고 빠르게 접근할 수 있는 블로그 서비스들을 개인 저장소겸 블로그로 이용해왔다. 그러던 중에 맥을 사용하게 돼서 하이퍼 터미널 검색 도중 백준호님의…","fields":{"slug":"/introduce-blog/"},"frontmatter":{"date":"Jan 01, 2022","title":"Github Blog Borderless Blog Theme","tags":["github"],"update":"Jan 01, 0001"}}}]}},"pageContext":{}},"staticQueryHashes":["2027115977","694178885"]}